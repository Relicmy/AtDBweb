class App {
    constructor() {
        this.backend = null;
        this.initBackend();
        this.initManagers();
    }

    initBackend() {
        if (typeof qt === 'undefined') {
            console.warn("Qt WebChannel –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
            setTimeout(() => this.initBackend(), 1000);
            return;
        }

        new QWebChannel(qt.webChannelTransport, channel => {
            this.backend = channel.objects.bridge;
            console.log("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±—ç–∫–µ–Ω–¥—É:", this.backend);

            if (this.backend?.getTasks) {
                this.backend.getTasks().then(tasks => {
                    this.modalManager.updateTaskList(tasks);
                }).catch(console.error);
            }

            this.initUI();
        });
    }

    initManagers() {
        this.modalManager = new ModalManager(this);
        this.panelManager = new PanelManager(this);
        this.tabManager = new TabManager(this);
        this.fileUploadManager = new FileUploadManager(this);
    }

    initUI() {
        document.getElementById("create-task")?.addEventListener("click", () => {
            this.modalManager.open({
                title: "–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞",
                placeholder: "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
                buttons: [
                    { id: "cancel-create", class: "btn-cancel", action: "cancel", text: "–û—Ç–º–µ–Ω–∞" },
                    { id: "confirm-create", class: "btn-create", action: "create", text: "–°–æ–∑–¥–∞—Ç—å" }
                ]
            });
        });

        document.getElementById("del-task")?.addEventListener("click", () => {
            this.modalManager.open({
                title: "–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É",
                placeholder: "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
                buttons: [
                    { id: "cancel-delete", class: "btn-cancel", action: "cancel", text: "–û—Ç–º–µ–Ω–∞" },
                    { id: "confirm-delete", class: "btn-delete", action: "delete", text: "–£–¥–∞–ª–∏—Ç—å" }
                ]
            });
        });

        this.panelManager.init();
        this.tabManager.init();
        this.fileUploadManager.init();
        this.panelManager.showDefaultPanel();
    }
}

class ModalManager {
    constructor(app) {
        this.app = app;
        this.container = document.getElementById("modal-create");
    }

    open({ title, placeholder, buttons }) {
        if (!this.container) return;

        this.container.innerHTML = `
            <div id="modal-create-task">
                <h3>${title}</h3>
                <input id="name-task" type="text" placeholder="${placeholder}" autofocus>
                <div class="modal-buttons">
                    ${buttons.map(btn => `
                        <button id="${btn.id}" class="b-create-task ${btn.class}" data-action="${btn.action}">
                            ${btn.text}
                        </button>
                    `).join('')}
                </div>
            </div>
        `;

        this.container.style.display = "flex";
        document.getElementById("name-task")?.focus();
        this.setupButtonHandlers();
    }

    setupButtonHandlers() {
        document.querySelectorAll("#modal-create-task button").forEach(button => {
            button.addEventListener("click", () => {
                const action = button.dataset.action;
                const name = document.getElementById("name-task")?.value.trim();

                if (action === "cancel") {
                    this.close();
                    return;
                }

                if (!name) {
                    alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏");
                    document.getElementById("name-task")?.focus();
                    return;
                }

                this.handleAction(action, name);
            });
        });
    }

    handleAction(action, name) {
        if (!this.app.backend) {
            console.error("–ë—ç–∫–µ–Ω–¥ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω");
            return;
        }

        switch (action) {
            case "delete":
                this.app.backend.dellTask(name);
                break;
            case "create":
                this.app.backend.addTask(name);
                break;
        }
        this.updateTaskListAfterAction();
        this.close();
    }

    async updateTaskListAfterAction() {
        try {
            // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –±—ç–∫–µ–Ω–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
            const tasks = await this.app.backend.getTasks();
            // ‚úÖ –í—ã–∑—ã–≤–∞–µ–º updateTaskList –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            this.updateTaskList(Array.isArray(tasks) ? tasks : []);
        } catch (err) {
            console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:", err);
            // –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Å–ø–∏—Å–æ–∫
        }
    }

    close() {
        if (!this.container) return;
        this.container.innerHTML = "";
        this.container.style.display = "none";
    }

    updateTaskList(tasks = []) {
        const list = document.getElementById("task-list");
        if (!list) return;

        list.innerHTML = tasks.length
            ? tasks.map(task => `<div class="button-task">${task}</div>`).join('')
            : '<div class="not-tasks"><img src="/AutoDataset/public/folder-add-file.svg" alt="">–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É</div>';
    }
}

class PanelManager {
    constructor(app) {
        this.app = app;
    }

    init() {
        this.setupBackButton();
        this.setupTaskList();
    }

    setupBackButton() {
        document.getElementById("back-button")?.addEventListener("click", () => this.showDefaultPanel());
    }

    setupTaskList() {
        const taskList = document.getElementById("task-list");
        if (!taskList) return;

        taskList.addEventListener("click", (e) => {
            const target = e.target.closest(".button-task");
            if (!target) return;

            document.querySelectorAll(".button-task").forEach(el => el.classList.remove("active"));
            target.classList.add("active");
            this.showSettingsPanel(target.textContent);
        });
    }

    showDefaultPanel() {
        document.getElementById("default-panel")?.classList.remove("hidden");
        document.getElementById("settings-ui")?.classList.add("hidden");
        document.querySelectorAll(".button-task").forEach(el => el.classList.remove("active"));
    }

    showSettingsPanel(taskName = "") {
        document.getElementById("default-panel")?.classList.add("hidden");
        document.getElementById("settings-ui")?.classList.remove("hidden");
        document.getElementById("current-task-name").textContent = taskName || "–¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞";
    }
    
}

class TabManager {
    constructor(app) {
        this.app = app;
    }

    async init() {
        this.setupTabs();
        
        await this.loadInitialTab();
    }

    setupTabs() {
        document.querySelectorAll(".tab").forEach(button => {
            button.addEventListener("click", () => this.handleTabClick(button));
        });
    }

    async loadInitialTab() {
        const defaultTab = document.querySelector('.tab[data-tab="append-file"]');
        if (defaultTab) await this.handleTabClick(defaultTab);
    }

    async handleTabClick(button) {
        const tabId = button.getAttribute("data-tab");

        document.querySelectorAll(".tab").forEach(btn => btn.classList.remove("active"));
        document.querySelectorAll(".tab-content").forEach(pane => pane.classList.remove("active"));

        button.classList.add("active");
        const targetPane = document.getElementById("tab-" + tabId);
        if (!targetPane) return;

        targetPane.classList.add("active");

        if (tabId === "augmentation") {
            await this.loadAugmentationTab(targetPane);
        }
    }
    initAugmentationSettings(container) {
        console.log("üîß initAugmentationSettings: —Å—Ç–∞—Ä—Ç");

        // === 1. –ö–Ω–æ–ø–∫–∏ "–û–±–∑–æ—Ä" ===
        document.querySelectorAll('.browse-btn[data-action="browse"]').forEach(btn => {
            btn.addEventListener('click', async () => {
                const targetId = btn.dataset.target;
                const input = document.getElementById(targetId);
                const backend = this.app.backend;

                if (!input || typeof backend?.openDirectoryDialog !== 'function') {
                    console.error("openDirectoryDialog –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
                    return;
                }

                try {
                    const path = await backend.openDirectoryDialog();
                    if (path) input.value = path;
                } catch (err) {
                    console.error("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏:", err);
                    alert("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏.");
                }
            });
        });

        // === 2. –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ .op-params (–æ–ø–µ—Ä–∞—Ü–∏–∏) ===
        document.querySelectorAll('.op-toggle').forEach(toggle => {
            const card = toggle.closest('.operation-card');
            const params = card?.querySelector('.op-params');
            if (!params) return;

            params.style.display = toggle.checked ? 'grid' : 'none';

            toggle.addEventListener('change', function () {
                params.style.display = this.checked ? 'grid' : 'none';
            });
        });

        // === 3. –¶–≤–µ—Ç–∞ ===
        const setupColorPicker = (input, btn, list) => {
            if (!input || !btn || !list) return;
            btn.addEventListener('click', () => {
                const color = input.value;
                const item = document.createElement('div');
                item.className = 'color-item';
                item.style.backgroundColor = color;
                item.dataset.color = color;
                item.addEventListener('click', () => item.remove());
                list.appendChild(item);
                input.value = '#000000';
            });
        };

        setupColorPicker(
            document.querySelector('.color-input[data-purpose="bg"]'),
            document.querySelector('.add-color-btn[data-purpose="bg"]'),
            document.getElementById('color-list')
        );

        setupColorPicker(
            document.querySelector('.color-input[data-purpose="group"]'),
            document.querySelector('.add-color-btn[data-purpose="group"]'),
            document.getElementById('group-color-list')
        );

        // === 4. –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ —Ñ–æ–Ω–∞ –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ ===
        const bgToggle = document.getElementById('bg-replace-toggle');
        const bgParams = document.querySelector('.bg-params');
        if (bgToggle && bgParams) {
            bgParams.style.display = bgToggle.checked ? 'block' : 'none';
            bgToggle.addEventListener('change', () => {
                bgParams.style.display = bgToggle.checked ? 'block' : 'none';
            });
        }

        const groupToggle = document.getElementById('grouping-toggle');
        const groupParams = document.querySelector('.group-params');
        if (groupToggle && groupParams) {
            groupParams.style.display = groupToggle.checked ? 'block' : 'none';
            groupToggle.addEventListener('change', () => {
                groupParams.style.display = groupToggle.checked ? 'block' : 'none';
            });
        }

        // === 5. –†–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏ ===
        document.querySelectorAll('input[type="radio"]').forEach(radio => {
            radio.addEventListener('change', function () {
                document.querySelectorAll(`input[name="${this.name}"]`)
                    .forEach(r => {
                        const custom = r.nextElementSibling;
                        if (custom && custom.classList.contains('radio-custom')) {
                            if (r.checked) {
                                custom.style.backgroundColor = '#bb86fc'; // –∏–ª–∏ –¥–æ–±–∞–≤—å –∫–ª–∞—Å—Å
                            } else {
                                custom.style.backgroundColor = '';
                            }
                        }
                    });
            });
        });

            // === –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
        document.getElementById('update-Augmentations')?.addEventListener('click', () => {
            const backend = this.app.backend;
            let name_task = document.getElementById("current-task-name");
            if (typeof backend?.update_augmentations !== 'function') {
                alert("‚ùå update_augmentation –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
                return;
            }
            const page_settings = document.getElementById('tab-augmentation')
            const htmlContent = page_settings.innerHTML;
            this.app.backend.update_augmentations(name_task.textContent.trim(), htmlContent);
        })

        // === 6. –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ ===
        document.getElementById('start-augmentation')?.addEventListener('click', () => {
            const backend = this.app.backend;
            if (typeof backend?.startAugmentation !== 'function') {
                alert("‚ùå startAugmentation –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
                return;
            }

            const config = {
                input_img: document.getElementById('input-path-img')?.value?.trim() || '',
                output_img: document.getElementById('output-path-img')?.value?.trim() || '',
                input_txt: document.getElementById('input-path-txt')?.value?.trim() || '',
                output_txt: document.getElementById('output-path-txt')?.value?.trim() || '',
                mode: document.querySelector('input[name="process-mode"]:checked')?.value,
                bg_enabled: document.getElementById('bg-replace-toggle')?.checked,
                group_enabled: document.getElementById('grouping-toggle')?.checked
            };

            if (!config.input_img || !config.output_img || !config.input_txt || !config.output_txt) {
                alert("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø—É—Ç–∏ –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞.");
                return;
            }

            console.log("üöÄ –ö–æ–Ω—Ñ–∏–≥:", config);
            backend.startAugmentation(JSON.stringify(config));
            alert("‚úÖ –ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞!");
        });

        console.log("‚úÖ initAugmentationSettings: –≥–æ—Ç–æ–≤–∞");
    }


    async loadAugmentationTab(container) {
        try {
            container.innerHTML = '<div class="tab-loader">–ó–∞–≥—Ä—É–∑–∫–∞...</div>';
            let name_task = document.getElementById("current-task-name");

            if (!name_task) {
                throw new Error("–≠–ª–µ–º–µ–Ω—Ç current-task-name –Ω–µ –Ω–∞–π–¥–µ–Ω");
            }

            console.log("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:", name_task.textContent);

            // –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –±—ç–∫–µ–Ω–¥ –∏ –ø–æ–ª—É—á–∞–µ–º HTML —Å—Ç—Ä–æ–∫—É
            const html = await this.app.backend.renderHTML(name_task.textContent.trim());

            // –ü—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤–ª—è–µ–º HTML, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ Response
            container.innerHTML = html;

            // –ü–µ—Ä–µ–¥–∞—ë–º container –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏
            this.initAugmentationSettings(container);

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:", error);
            container.innerHTML = '<div class="tab-error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + error.message + '</div>';
        }
    }

    initElementSelection() {
        // 1. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è XPath
        const getXPath = (element) => {
            if (!element) return "";
            if (element.id) return `//*[@id="${element.id}"]`;
            if (element === document.body) return "/html/body";

            let ix = 0;
            const siblings = element.parentNode.childNodes;
            for (let i = 0; i < siblings.length; i++) {
                const sibling = siblings[i];
                if (sibling === element) {
                    return `${getXPath(element.parentNode)}/${element.tagName}[${ix + 1}]`;
                }
                if (sibling.nodeType === 1 && sibling.tagName === element.tagName) {
                    ix++;
                }
            }
            return "";
        };

        // 2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤
        document.addEventListener("click", (e) => {
            e.preventDefault();
            const element = e.target;

            // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
            document.querySelectorAll(".highlighted-element").forEach(el => {
                el.classList.remove("highlighted-element");
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä
            element.classList.add("highlighted-element");

            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            const data = {
                xpath: getXPath(element),
                rect: element.getBoundingClientRect(),
                html: element.outerHTML
            };

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ WebChannel
            // if (window.pySide?.sendData) {
            //     window.pySide.sendData(JSON.stringify(data));
            // } else {
            //     console.warn("WebChannel –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω");
            // }
        }); 
    }
    initBrowserTab() {
        document.getElementById('start-browser')?.addEventListener('click', () => {
            this.startSeleniumBrowser();
        });
    }

    startSeleniumBrowser() {
        const container = document.getElementById('browser-container');
        container.style.display = 'block';

        if (window.pySide?.startBrowser) {
            window.pySide.startBrowser();
        } else {
            console.error('WebChannel not connected');
        }
    }
}

class FileUploadManager {
    constructor(app) {
        this.app = app;
    }

    init() {
        const dropZone = document.getElementById('dropZone');
        if (!dropZone) return;

        const elements = {
            fileInputImage: document.getElementById('fileInput-image'),
            fileInputCoords: document.getElementById('fileInput-coords'),
            fileListImage: document.getElementById('fileList-image'),
            fileListCoords: document.getElementById('fileList-coords'),
            fileNameCC: document.getElementById('coords-cheaker'),
            fileNameIC: document.getElementById('image-cheaker')
        };

        if (Object.values(elements).some(el => !el)) return;

        elements.fileInputImage.addEventListener('change', (e) =>
            this.handleFileUpload(e.target.files, elements.fileNameIC, elements.fileListImage, 'image'));

        elements.fileInputCoords.addEventListener('change', (e) =>
            this.handleFileUpload(e.target.files, elements.fileNameCC, elements.fileListCoords, 'coords'));

        dropZone.addEventListener('dragover', this.handleDragOver);
        dropZone.addEventListener('dragleave', this.handleDragLeave);
        dropZone.addEventListener('drop', (e) => this.handleDrop(e, elements));
    }

    handleFileUpload(files, fileNameElement, fileListElement, type) {
        if (!files.length) {
            fileNameElement.textContent = type === 'image'
                ? '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω—ã'
                : '–§–∞–π–ª—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω—ã';
            fileListElement.innerHTML = '';
            return;
        }

        fileNameElement.textContent = files.length === 1
            ? files[0].name
            : `${files.length} —Ñ–∞–π–ª–æ–≤ –≤—ã–±—Ä–∞–Ω–æ`;

        fileListElement.innerHTML = '';
        const list = document.createElement('ul');

        Array.from(files).forEach(file => {
            const item = document.createElement('li');
            item.textContent = `${file.name} (${this.formatFileSize(file.size)})`;
            list.appendChild(item);
        });

        fileListElement.appendChild(list);
    }

    handleDragOver(e) {
        e.preventDefault();
        e.currentTarget.classList.add('highlight');
    }

    handleDragLeave(e) {
        e.currentTarget.classList.remove('highlight');
    }

    handleDrop(e, elements) {
        e.preventDefault();
        e.currentTarget.classList.remove('highlight');

        if (!e.dataTransfer.files.length) return;

        const isImage = Array.from(elementsFromPoint(e.clientX, e.clientY))
            .some(el => el.classList.contains('fileInput-image'));

        const targetInput = isImage ? elements.fileInputImage : elements.fileInputCoords;
        targetInput.files = e.dataTransfer.files;
        targetInput.dispatchEvent(new Event('change'));
    }

    formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const units = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
        const i = Math.floor(Math.log(bytes) / Math.log(1024));
        return `${(bytes / Math.pow(1024, i)).toFixed(2)} ${units[i]}`;
    }
}

function addItem() {
    const container = document.getElementById('items-container');
    const item = document.createElement('div');
    item.className = 'item';
    item.innerHTML = `
      <input class="int-form" type="text" placeholder="–≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã">
      <input class="int-form" type="text" placeholder="–≤–≤–µ–¥–∏—Ç–µ css –∫–ª–∞—Å—Å —ç–ª–µ–º–µ–Ω—Ç–∞">
      <input class="int-form" type="text" placeholder="–≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞">
      <input class="int-form" type="text" placeholder="–≤–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å–æ–≤–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–∞">
      <button type="button" class="remove-btn" onclick="removeItem(this)">‚úï</button>
    `;
    container.appendChild(item);
}

function removeItem(button) {
    const item = button.parentElement;
    if (document.querySelectorAll('.item').length > 1) {
        item.remove();
    } else {
        alert("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–∑–∏—Ü–∏—é.");
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
function getFormData() {
    const items = [];
    document.querySelectorAll('.item').forEach(item => {
        const inputs = item.querySelectorAll('input');
        items.push({
            url: inputs[0].value,
            cssClass: inputs[1].value,
            text: inputs[2].value,
            klassnost: inputs[3].value  // "–∫–ª–∞—Å—Å–æ–≤–æ—Å—Ç—å" ‚Äî –∫–∞–∫ –≤ –≤–∞—à–µ–º –ø—Ä–∏–º–µ—Ä–µ
        });
    });
    return items;
}

// function initAugmentationSettings() {
//     console.log("üîß initAugmentationSettings: —Å—Ç–∞—Ä—Ç");

//     // 1. –ö–Ω–æ–ø–∫–∏ "–û–±–∑–æ—Ä"
//     document.querySelectorAll('.browse-btn[data-action="browse"]').forEach(btn => {
//         btn.addEventListener('click', async () => {
//             const targetId = btn.dataset.target;
//             const input = document.getElementById(targetId);
//             // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ backend –∏ –º–µ—Ç–æ–¥ –¥–æ—Å—Ç—É–ø–Ω—ã
//             if (!input || typeof backend?.openDirectoryDialog !== 'function') {
//                 console.error("backend.openDirectoryDialog –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ input –Ω–µ –Ω–∞–π–¥–µ–Ω");
//                 return;
//             }

//             try {
//                 const path = await backend.openDirectoryDialog();
//                 if (path) input.value = path;
//             } catch (err) {
//                 console.error("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏:", err);
//                 alert("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏.");
//             }
//         });
//     });

//     // 2. –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ .op-params –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π
//     document.querySelectorAll('.op-toggle').forEach(toggle => {
//         const card = toggle.closest('.operation-card');
//         const params = card?.querySelector('.op-params');
//         if (!params) return;

//         // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
//         params.style.display = toggle.checked ? 'grid' : 'none';

//         // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è
//         toggle.addEventListener('change', function () {
//             params.style.display = this.checked ? 'grid' : 'none';
//         });
//     });

//     // 3. –¶–≤–µ—Ç–∞
//     const setupColorPicker = (input, btn, list) => {
//         if (!input || !btn || !list) {
//             console.warn("setupColorPicker: –æ–¥–∏–Ω –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω", { input, btn, list });
//             return;
//         }

//         btn.addEventListener('click', () => {
//             const color = input.value;
//             const item = document.createElement('div');
//             item.className = 'color-item';
//             item.style.backgroundColor = color;
//             item.dataset.color = color;
//             item.addEventListener('click', () => item.remove());
//             list.appendChild(item);
//             // –°–±—Ä–æ—Å —Ü–≤–µ—Ç–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
//             input.value = '#000000';
//         });
//     };

//     setupColorPicker(
//         document.querySelector('.color-input[data-purpose="bg"]'),
//         document.querySelector('.add-color-btn[data-purpose="bg"]'),
//         document.getElementById('color-list')
//     );

//     setupColorPicker(
//         document.querySelector('.color-input[data-purpose="group"]'),
//         document.querySelector('.add-color-btn[data-purpose="group"]'),
//         document.getElementById('group-color-list')
//     );

//     // 4. –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ —Ñ–æ–Ω–∞ –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
//     const bgToggle = document.getElementById('bg-replace-toggle');
//     const bgParams = document.querySelector('.bg-params');
//     if (bgToggle && bgParams) {
//         bgParams.style.display = bgToggle.checked ? 'block' : 'none';
//         bgToggle.addEventListener('change', () => {
//             bgParams.style.display = bgToggle.checked ? 'block' : 'none';
//         });
//     }

//     const groupToggle = document.getElementById('grouping-toggle');
//     const groupParams = document.querySelector('.group-params');
//     if (groupToggle && groupParams) {
//         groupParams.style.display = groupToggle.checked ? 'block' : 'none';
//         groupToggle.addEventListener('change', () => {
//             groupParams.style.display = groupToggle.checked ? 'block' : 'none';
//         });
//     }

//     // 5. –†–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏
//     document.querySelectorAll('input[type="radio"]').forEach(radio => {
//         const option = radio.closest('.radio-option');
//         if (!option) return;

//         radio.addEventListener('change', () => {
//             document.querySelectorAll(`input[name="${radio.name}"]`)
//                 .forEach(r => r.closest('.radio-option')?.classList.remove('active'));
//             option.classList.add('active');
//         });

//         // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
//         if (radio.checked) {
//             option.classList.add('active');
//         }
//     });

//     // 6. –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
//     document.getElementById('start-augmentation')?.addEventListener('click', () => {
//         if (typeof backend?.startAugmentation !== 'function') {
//             alert("‚ùå –§—É–Ω–∫—Ü–∏—è startAugmentation –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å backend.");
//             console.error("backend.startAugmentation –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π");
//             return;
//         }

//         const config = {
//             input_img: document.getElementById('input-path-img')?.value?.trim() || '',
//             output_img: document.getElementById('output-path-img')?.value?.trim() || '',
//             input_txt: document.getElementById('input-path-txt')?.value?.trim() || '',
//             output_txt: document.getElementById('output-path-txt')?.value?.trim() || '',
//             mode: document.querySelector('input[name="process-mode"]:checked')?.value,
//             bg_enabled: document.getElementById('bg-replace-toggle')?.checked,
//             group_enabled: document.getElementById('grouping-toggle')?.checked
//         };

//         // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
//         if (!config.input_img || !config.output_img || !config.input_txt || !config.output_txt) {
//             alert("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø—É—Ç–∏ –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞.");
//             return;
//         }

//         console.log("üöÄ –ö–æ–Ω—Ñ–∏–≥ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏:", config);

//         try {
//             backend.startAugmentation(JSON.stringify(config));
//             alert("‚úÖ –ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞!");
//         } catch (err) {
//             console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ startAugmentation:", err);
//             alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏.");
//         }
//     });

//     console.log("‚úÖ initAugmentationSettings: –≥–æ—Ç–æ–≤–∞");
// }

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    new App();
});